1. 用递归实现快速排序  ：《程序设计基础》 P154



2. 汉诺塔问题     ：《程序设计基础》 P149



3.  汉诺双塔
试题来源
　　NOIP2007 普及组
问题描述
　　给定A、B、C三根足够长的细柱，在A柱上放有2n个中间有孔的圆盘，共有n个不同的尺寸，每个尺寸都有两个相同的圆盘，注意这两个圆盘是不加区分的（下图为n=3的情形）。现要将这些圆盘移到C柱上，在移动过程中可放在B柱上暂存。要求：
　　（1）每次只能移动一个圆盘；
　　（2）A、B、C三根细柱上的圆盘都要保持上小下大的顺序；
　　任务：设An为2n个圆盘完成上述任务所需的最少移动次数，对于输入的n，输出An。
 
输入格式
　　一个正整数n，表示在A柱上放有2n个圆盘。
输出格式
　　仅一行，包含一个正整数, 为完成上述任务所需的最少移动次数An。
样例输入
1
样例输出
2
样例输入
2
样例输出
6
数据规模和约定
　　对于50%的数据，1<=n<=25
　　对于100%的数据，1<=n<=200
提示
设法建立An与An-1的递推关系式。
注：
（如果没学高精度，可以不用考虑后50%的数据）





4. 数字旋转方阵   ： 《程序设计基础》 P158



5. 佳佳的矩阵
【题目描述】---- 可以使用递归
佳佳最喜欢上线代课了，尤其喜欢萌萌的梁恒老师。
在线代课上，佳佳最近见到了各种各样奇奇怪怪的矩阵，像什么三对角矩阵、箭形矩阵、范德蒙德矩阵……脑洞大开的佳佳决定设计属于她自己的矩阵。
  4  1
  3  2
	上面两个矩阵是佳佳给你的例子，她希望在告诉你矩阵的大小后，你能告诉她属于她自己的矩阵应该长什么样。
【输入描述】
输入一个正整数n（1≤n≤500），表示你应该输出一个n阶矩阵。
【输出描述】
	输出共包括n行，每行包含n个正整数，表示你输出的矩阵。
【样例输入】
4
【样例输出】
10 11 12 1
9 16 13 2
8 15 14 3
7 6 5 4
【注释】
	本题考查条件语句、循环语句等基本语法知识的掌握，不涉及任何算法知识。
	单个测试点时间限制：1s 空间限制：256Mb





6. 下楼问题  ：《程序设计基础》 P162




7. 建立二叉树  ： 《程序设计基础》 P180



8 翻转二叉树  todo
https://blog.csdn.net/YouMing_Li/article/details/142433838




8. 二分法查找
https://blog.csdn.net/qq_44377709/article/details/135896251

public class 二分查找 {
    public static void main(String[] args) {

        int[] arr = {1, 2, 3, 5, 6, 7, 9, 22, 33, 66, 78, 81, 99, 100};
        int targetNum = 3;
        System.out.println(binarySearch(arr, targetNum, 0, arr.length));
    }

    private static int binarySearch(int[] arr, int targetNum, int left, int right) {
        if (left > right) {
            return -1;
        }
        int mid = (left + right) >>> 1;
        if (arr[mid] < targetNum) {
            return binarySearch(arr, targetNum, mid + 1, right);
        } else if (arr[mid] > targetNum) {
            return binarySearch(arr, targetNum, left, mid - 1);
        } else {
            return mid;
        }
    }
}



9.翻转字符串
https://blog.csdn.net/qq_44377709/article/details/135896251
public class 翻转字符串 {
    public static void main(String[] args) {
        String str = "wrewtyu";
        f(str,0);
    }

    private static void f(String str, int index) {
        if (index == str.length()) {
            return;
        }
        f(str, index + 1);
        System.out.println(str.charAt(index));
    }
}


